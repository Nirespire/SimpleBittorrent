	public static void rebuildFile(RandomAccessFile[] files) throws IOException{
		BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("img\\LennaRebuild.png"));
		
		for(RandomAccessFile chunk : files){
			readWrite(chunk, bos, chunk.length());
		}
		
		bos.close();
	}

	public static void splitFile(RandomAccessFile raf) throws IOException {
		long numSplits = 10;
		long sourceSize = raf.length();
		long bytesPerSplit = sourceSize / numSplits;
		long remainingBytes = sourceSize % numSplits;

		// 8KB chunks
		int maxReadBufferSize = 8 * 1024;
		
		for (int destIx = 1; destIx <= numSplits; destIx++) {
			BufferedOutputStream bw = new BufferedOutputStream(new FileOutputStream("img\\splits\\split." + destIx));
			
			if (bytesPerSplit > maxReadBufferSize) {
				long numReads = bytesPerSplit / maxReadBufferSize;
				long numRemainingRead = bytesPerSplit % maxReadBufferSize;
				for (int i = 0; i < numReads; i++) {
					readWrite(raf, bw, maxReadBufferSize);
				}
				if (numRemainingRead > 0) {
					readWrite(raf, bw, numRemainingRead);
				}
			} else {
				readWrite(raf, bw, bytesPerSplit);
			}
			bw.close();
		}
		
		// Write any trailing bytes
		if (remainingBytes > 0) {
			BufferedOutputStream bw = new BufferedOutputStream(
					new FileOutputStream("img\\splits\\split." + (int)(numSplits + 1)));
			readWrite(raf, bw, remainingBytes);
			bw.close();
		}
		raf.close();
	}
	
	// Puts numBytes number of bytes into bw buffer from file raf
	static void readWrite(RandomAccessFile raf, BufferedOutputStream bw, long numBytes) throws IOException {
		byte[] buf = new byte[(int) numBytes];
		int val = raf.read(buf);
		if (val != -1) {
			bw.write(buf);
		}
	}